// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/14/2018 12:19:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          timename
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module timename_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg key0;
reg key1;
reg key2;
reg key3;
reg sw0;
// wires                                               
wire co;
wire [7:0] hh;
wire [7:0] hl;
wire [7:0] mh;
wire [7:0] ml;
wire [7:0] s;
wire [7:0] sh;

// assign statements (if any)                          
timename i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.co(co),
	.hh(hh),
	.hl(hl),
	.key0(key0),
	.key1(key1),
	.key2(key2),
	.key3(key3),
	.mh(mh),
	.ml(ml),
	.s(s),
	.sh(sh),
	.sw0(sw0)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// key0
initial
begin
	key0 = 1'b0;
end 

// key1
initial
begin
	key1 = 1'b0;
end 

// key2
initial
begin
	key2 = 1'b0;
end 

// key3
initial
begin
	key3 = 1'b0;
end 

// sw0
initial
begin
	sw0 = 1'b1;
end 
endmodule

